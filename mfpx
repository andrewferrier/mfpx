#!/usr/bin/env node
//--------------------------------------------------------------------
// Simple multi-MFP launcher script
// Karl Bishop <kfbishop@us.ibm.com>
//--------------------------------------------------------------------
// Licensed Materials - Property of IBM
// 5725-I43 (C) Copyright IBM Corp. 2015. All Rights Reserved.
// US Government Users Restricted Rights - Use, duplication or
// disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//--------------------------------------------------------------------

//-- GLOBALS
var MFPX_VERSION  = "1.0.0",
	mfpConfig        = require("mfpx-config"),
	cfg              = mfpConfig.config;

//-----------------------------------------------------------------------
// MAIN
//-----------------------------------------------------------------------

mfpConfig.load();
mfpConfig.mfpx_version = MFPX_VERSION;

launch();


//-----------------------------------------------------------------------
// Process argvs and launch action
function launch() {
	var args = process.argv.slice(2),
		mod  = null;
		
	//console.log("Arguments:", args);
	//console.log("CFG:", CFG);

	if ( mfpConfig.get("mfp_version") === null && (args[0] !== "set" && args[0] !== "update") ) {
		console.error("Error: No version set in config file. Run 'mfpx set <version>' or 'mfpx update'\n");
		args = ["-?"];  // force generic help
	}

	switch( args[0] ) {
		case "export":
			mod = require("mfpx-export");
			mod.export(args[1]);
			break;
		case "import":
			mod = require("mfpx-export");
			mod.import(args[1]);
			break;

		case "set":
			setVersion( args[1] );
			break;
			
		case "clean":
			mod = require("mfpx-server");
			mod.killServer( args[1] );
			mod.cleanServerServer();
			break;
		case "kill":
			mod = require("mfpx-server");
			mod.killServer( args[1] );
			break;

		case "update":
			console.error("Needs to be re-written, until then -- non soup for you!");
			return -1;
			mod = require("mfpx-update");
			// second arg indicates ios version
			mod.getLatestBuild( (args[1] ? true : false) );
			break;

		case "-?":
			mod = require("mfpx-help");
			mod( args );
			break;
			
		case "-v":
			console.log("MFP eXtras version:", mfpConfig.mfpx_version);
			console.log("MFP current version:", mfpConfig.get("mfp_version"));
			mod = require("mfpx-run");
			mod(args);
			break;
			
		default:
			mod = require("mfpx-run");
			mod(args);
	}
}

//-----------------------------------------------------------------------
function setVersion( ver ) {
	var fs     = require("fs"),
		server = require("mfpx-server"),
		mfpRun = require("mfpx-run"),
	    mfpdir = mfpConfig.ibmDir + "/mobilefirst",
	    verdir = mfpdir + "-" + ver;

	console.log("Switching MFP to version:", ver);
	server.kill();

	//-- Ensure clean environment (assumptions on directories!)
	if ( ! fs.existsSync( verdir ) ) {
		fs.mkdirSync(verdir);
	}
	if ( fs.existsSync( mfpdir ) ) {
		fs.unlinkSync( mfpdir );
	}
	fs.symlinkSync(verdir, mfpdir, 'dir');

	if ( cfg.manage_app_home ) {
		console.log("Updating app_home to point to:", cfg.app_home+"-"+ver);
		if ( ! fs.existsSync( cfg.app_home+"-"+ver ) ) {
			fs.mkdirSync( cfg.app_home+"-"+ver );
		}
		fs.unlinkSync( cfg.app_home );
		fs.symlinkSync(cfg.app_home+"-"+ver, cfg.app_home, 'dir');
	}
	mfpConfig.set("mfp_version", ver);
	console.log("MFP version set to:", ver);
	mfpRun(["--version"], true);
}

//-----------------------------------------------------------------------
