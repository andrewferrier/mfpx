//-----------------------------------------------------------------------
//-- mfpx-config
//-----------------------------------------------------------------------
var fs      = require("fs");

module.exports = {
	ibmDir    : process.env.HOME + "/.ibm",
	cfgFile   : process.env.HOME + "/.ibm/mfpx.json",
	config    : {},
	sampleVersionEntry : {
		"cmd": "/Applications/IBM/MobileFirst-CLI-x.x/mfp",
		"java_home": "/Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home",
		"server_port": "10080"
	},


	//-----------------------------------------------------------------------
	// Load Config, or Create default configuration file
	load : function() {
		var	mfpHome = process.env.HOME + "/dev/mfp";
		if ( fs.existsSync( this.cfgFile ) ) {
			this.config = require( this.cfgFile );
		}

		this.config.mfp_version      = this.config.mfp_version      || "";
//		this.config.java_home        = this.config.java_home        || process.env.JAVA_HOME;
		//"/Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home",
		this.config.mfp_install_dir  = this.config.mfp_install_dir  || mfpHome + "/installers";
		this.config.app_home         = this.config.app_home         || mfpHome + "/apps";
//		this.config.default_mfp_port = this.config.default_mfp_port || "10080";
		this.config.manage_app_home  = (!!this.config.manage_app_home ? true : false);
		this.config.update_url       = this.config.update_url       || "";

		if ( !(this.config.mfp_versions) ) {
			this.config.mfp_versions = {
				"x.x": this.sampleVersionEntry
			};
		}
		
		this.save();
	},
	
	//-----------------------------------------------------------------------
	// Creates default configuration file
	save : function() {
		//console.log("Saving config: ", this.config);
		fs.writeFileSync( this.cfgFile, JSON.stringify(this.config, null, 2));
	},
	
	//-----------------------------------------------------------------------
	// provide details on currently set MFP instance
	"get" : function( key ) {
		var iv = this.config.mfp_version;
		
		if ( key === "mfp_instance_version") {
			if ( this.config.mfp_versions[ iv ] ) {
				return this.config.mfp_versions[ iv ];
			} else {
				throw new Error("No mfp_versions entry for '" + iv + "'");
			}
		} else {
			return this.config[key];
		}
	},
	
	//-----------------------------------------------------------------------
	"set" : function( key, val ) {
		if ( key === "mfp_version" && !(this.config.mfp_versions[ val ]) ) {
			console.error("No mfp_versions entry for '%s' in config file '%s'.", val, this.cfgFile);
			console.log("Populate mfp_versions entry like:");
			console.log('"8.2":', JSON.stringify(this.sampleVersionEntry, null, 2) );
			throw new Error("No mfp_versions entry for '"+val+"'");
		} else {
			this.config[key] = val;
			this.save();
		}
	}

};

//-----------------------------------------------------------------------
