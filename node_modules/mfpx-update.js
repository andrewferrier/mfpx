//-----------------------------------------------------------------------------
//-- mfpx-update
//-----------------------------------------------------------------------------
var fs         = require('fs'),
	http       = require('http'),
	path       = require("path"),
	Q          = require("q"),
	mfpConfig  = require("mfpx-config"),
	cfg        = mfpConfig.config,
	targetPath = "";

//-----------------------------------------------------------------------
var install = function( args ) {
	var ver         = args[1],
		verInstance = null,
		versions    = mfpConfig.get("mfp_versions"),
		installDir  = mfpConfig.get("mfp_install_dir"),
		url         = "",
		targetFile  = "";

	if ( !ver ) {
		console.log("Syntax: mfpx install <version>");
		console.log("Where : <version> matches an entry in config's mfp_versions map.");
		console.log("");		
		console.log("MFPX Config file    : " + mfpConfig.cfgFile );
		console.log("Available versions  : " + Object.keys( versions ).join(", ") );
		return -1;
	}

	verInstance = mfpConfig.get("mfp_versions")[ver];
	//console.log("verInstance:", verInstance);
	
	//-- Ensure clean environment (assumptions on directories!)
	if ( !verInstance ) {
		console.error("Error: Requested version '%s' not found in config's 'mfp_verisons'", ver);
		console.log("Manually edit '%s' to define requested version and re-run set command.", mfpConfig.cfgFile );
		return -1;
	}
	
	targetPath = path.dirname(verInstance.cmd);
	
	if( fs.existsSync( verInstance.cmd ) ) {
		console.error("Error: Requested version '%s' is already installed.", ver);
		console.log("If desired, uninstall existing version and then re-run install command.");
		console.log("Existing version installed at:", targetPath );
		return -1;
	}

	//-- Make/Move to install dir
	try { fs.mkdirSync(installDir); } catch(e) {}
	try {
		process.chdir(installDir);
		console.log('Changed to directory: ' + process.cwd());
	} catch(err) {
		console.error("Failed to change to dir:", installDir);
		return 1;
	}
	url = verInstance.download_url;
	targetFile = path.join( installDir, path.basename( url ) );
	
	if ( fs.existsSync(targetFile) && fs.statSync(targetFile).size > 0) {
		// Dont re-download if exists (and has size), pull dummy file to keep flow
		console.log("Target file exists, not downloading:", targetFile);
		var installDir = _extractInstaller(targetFile);
		_runInstaller(installDir);
		console.log("Finished. Now run 'mfpx set %s' to start using this version", ver);
	} else {
		_download( url, targetFile )
			.then( function(targetFile) {
				var installDir = _extractInstaller(targetFile);
				_runInstaller(installDir);
			})
			.done( function() {
				console.log("Finished. Now run 'mfpx set %s' to start using this version", ver);
			});
	}
};

//-----------------------------------------------------------------------
// Download requested file
var _download = function( url, targetFile ) {
	var outfile,
		total = 0,
		subtotal = 0,
		inbytes = 0,
		mb = 1048576,
		deferred = Q.defer();

	console.log("Downloading file: " + url);
	outfile = fs.createWriteStream(targetFile);
	http.get( url, function(resp) {
		resp.pipe(outfile);
		total = Math.round(parseInt(resp.headers["content-length"]) / mb);
		if ( process.stdin.isTTY ) {
			resp.on("data", function(chunk) {
				inbytes += chunk.length;
				subtotal = Math.round(inbytes / mb);
				process.stdout.write("Received " + subtotal + " of " + total + "MB      \r");
			});
		}
		resp.on('end', function() {
			console.log('Download completed                ');
			deferred.resolve(targetFile);
		});
	}).on('error', function(e) {
		deferred.reject("Error: " + e.message);
	});
	return deferred.promise;
}



//-----------------------------------------------------------------------
// Extract resource form zip, and more into proper place
var _extractInstaller = function( filename ) {
	var cp         = require('child_process'),
		rimraf     = require('rimraf'),
		unzip      = require('unzip'),
		deferred   = Q.defer(),

		version,
		installerDir;

	version = filename.replace(/^.*installer[_-]([0-9]\.[0-9]\.[0-9]).*$/, "$1");
	//console.log("version", version);
	installerDir = path.join(".","mobilefirst-cli-installer-"+version);

	console.log("Extracting installer files from:", filename);
	cp.spawnSync("unzip", [filename]);
	// var unzipper = unzip.Extract({ path: "." });
    // unzipper.on('error', function(err) {
	// 		deferred.reject(e);
    // });
    // unzipper.on('close', function() {
	// 	console.log("Unzip completed");
	// 	installerDir = path.join(".","mobilefirst-cli-installer-"+version);
	// 	deferred.resolve( installerDir );
	// });
    // fs.createReadStream(filename).pipe(unzipper);
	
	// fs.createReadStream( filename )
	// 	.pipe( unzip.Extract({ path:'.' }) )
	// 	.on('close', function() {
	// 		console.log("Unzip completed");
	// 		installerDir = path.join(".","mobilefirst-cli-installer-"+version);
	// 		deferred.resolve( installerDir );
	// 	})
	// 	.on('error', function(e) {
	// 		deferred.reject(e);
	// 	});
	return installerDir; //deferred.promise;
}
		
//-----------------------------------------------------------------------
var _runInstaller = function( installerDir ) {
	var cp         = require('child_process'),
		platform   = require('os').platform();
	
	console.log("Running installer program.");
	console.log("================================================================================");
	console.log("=====   Ensure you install this to: %s", targetPath);
	console.log("=====   Alternately, update cmd entry in config file to installed location.");
	console.log("================================================================================");
	switch ( platform ) {
		case "darwin": // OSX
			var cmd = "./" + installerDir + "/install_mac.app";
			console.log("Running: ", cmd);
			cp.spawn( "/usr/bin/open", [cmd] );
			break;
		default:
			console.error("Unknown O/S '%s', unable to continue.", platform );
			return -1;
	}
}

//-----------------------------------------------------------------------
// Utility to pull the latest MFP drivers from internal repo
var getLatestVersion = function( ios ) {
	var matchpattern, 
		filename, 
		listData = "";

	if ( !cfg.update_url ) {
		console.error("Pre-release updates are only available to IBMers.");
		console.log("Set the 'update_url' value provided by MFP development in: ", mfpConfig.cfgFile);
		return -1;
	}
	
	//-- Make tmp dir
	try { fs.mkdirSync(cfg.mfp_install_dir); } catch(e) {}
	try {
		process.chdir(cfg.mfp_install_dir);
		console.log('Changed to directory: ' + process.cwd());
	} catch(err) {
		console.error("Failed to change to dir:", cfg.mfp_install_dir);
		return 1;
	}

	if ( ios ) {
		//  mobilefirst-ios-cli-installer-7.1.0-20150523-0739.zip
		matchpattern = /"(mobilefirst[_-]ios[_-]cli[_-]installer[_-].*\.zip)"/;
	} else {
		//	mobilefirst-cli-installer-7.1.0-20150523-0739.zip
		matchpattern = /"(mobilefirst[_-]cli[_-]installer[_-].*\.zip)"/;
	}

	//-- Pull list of files
	console.log("Searching for latest installer from update site...");
	http.get(cfg.update_url, function(resp) {
        resp.on('data', function(data) {
            listData += data;
        });
        resp.on('end', function() {
			//console.log("Response: " + listData);
			filename = listData.match(matchpattern);
			if ( filename ) {
				//-- Strip quotes
				filename = filename[0].replace(matchpattern, "$1");
				//filename = filename[0].substr(1, filename[0].length-2;
				console.log("Located file: ", filename);
				if ( fs.existsSync(filename) && fs.statSync(filename).size > 0) {
					// Dont re-download if exists (and has size), pull dummy file to keep flow
					console.log("Local file exists, not downloading.");
					this._processInstaller( filename, ios );
					return;
				} else {
					this._downloadInstaller( filename, ios);
				}
			} else {
				console.error("Unable to locate a CLI installer at: ", cfg.update_url);
			}
		});
	}).on('error', function(e) {
		console.error("Got error: " + e.message);
	});
}


//-----------------------------------------------------------------------------
exports.getLatestVersion = getLatestVersion;
exports.install = install;
