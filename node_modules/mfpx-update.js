//-----------------------------------------------------------------------------
//-- mfpx-update
//-----------------------------------------------------------------------------
var fs         = require('fs'),
	http       = require('http'),
	mfpConfig  = require("mfpx-config"),
	cfg        = mfpConfig.config;

//-----------------------------------------------------------------------
// Utility to pull the latest MFP drivers from internal repo
var getLatestVersion = function( ios ) {
	var matchpattern, 
		filename, 
		listData = "";

	if ( !cfg.update_url ) {
		console.error("Pre-release updates are only available to IBMers.");
		console.log("Set the 'update_url' value provided by MFP development in: ", mfpConfig.cfgFile);
		return -1;
	}
	
	//-- Make tmp dir
	try { fs.mkdirSync(cfg.mfp_install_dir); } catch(e) {}
	try {
		process.chdir(cfg.mfp_install_dir);
		console.log('Changed to directory: ' + process.cwd());
	} catch(err) {
		console.error("Failed to change to dir:", cfg.mfp_install_dir);
		return 1;
	}

	if ( ios ) {
		//  mobilefirst-ios-cli-installer-7.1.0-20150523-0739.zip
		matchpattern = /"(mobilefirst[_-]ios[_-]cli[_-]installer[_-].*\.zip)"/;
	} else {
		//	mobilefirst-cli-installer-7.1.0-20150523-0739.zip
		matchpattern = /"(mobilefirst[_-]cli[_-]installer[_-].*\.zip)"/;
	}

	//-- Pull list of files
	console.log("Searching for latest installer from update site...");
	http.get(cfg.update_url, function(resp) {
        resp.on('data', function(data) {
            listData += data;
        });
        resp.on('end', function() {
			//console.log("Response: " + listData);
			filename = listData.match(matchpattern);
			if ( filename ) {
				//-- Strip quotes
				filename = filename[0].replace(matchpattern, "$1");
				//filename = filename[0].substr(1, filename[0].length-2;
				console.log("Located file: ", filename);
				if ( fs.existsSync(filename) && fs.statSync(filename).size > 0) {
					// Dont re-download if exists (and has size), pull dummy file to keep flow
					console.log("Local file exists, not downloading.");
					this._processInstaller( filename, ios );
					return;
				} else {
					this._downloadInstaller( filename, ios);
				}
			} else {
				console.error("Unable to locate a CLI installer at: ", cfg.update_url);
			}
		});
	}).on('error', function(e) {
		console.error("Got error: " + e.message);
	});
}


//-----------------------------------------------------------------------
// Download latest Installer file
var _downloadInstaller = function( filename, ios ) {
	var outfile,
		total = 0,
		subtotal = 0,
		inbytes = 0,
		mb = 1048576;

	outfile = fs.createWriteStream(filename);
	console.log("Downloading file: " + cfg.update_url+filename);
	http.get( cfg.update_url + filename, function(resp) {
		resp.pipe(outfile);
		total = Math.round(parseInt(resp.headers["content-length"]) / mb);
		if ( process.stdin.isTTY ) {
			resp.on("data", function(chunk) {
				inbytes += chunk.length;
				subtotal = Math.round(inbytes / mb);
				process.stdout.write("Received " + subtotal + " of " + total + "MB      \r");
			});
		}
		resp.on('end', function() {
			console.log('Download completed                ');
			_processInstaller( filename, ios );
			return;
		});
	}).on('error', function(e) {
		console.error("Got error: " + e.message);
	});
}


//-----------------------------------------------------------------------
// Extract resource form zip, and more into proper place
var _processInstaller = function( filename, ios ) {
	var rimraf     = require('rimraf'),
		spawnSync  = require('child_process').spawnSync,
		version,
		fullver,
		resfile,
		targetdir;

	fullver = filename.replace(/^.*installer-([0-9]\.[0-9]\.[0-9])-.*$/, "$1");
	version = filename.replace(/^.*installer-([0-9]\.[0-9])\..*$/, "$1");
	resfile = "mobilefirst-cli-"+fullver+"-install.zip";
	targetdir = cfg.mfp_home+"/mobilefirst-cli-"+version+(ios?"-ios":"");
	console.log("fullver", fullver);
	console.log("version", version);
	console.log("resfile", resfile);
	console.log("targetdir", targetdir);

	//-- Extract out resources.zip
	console.log("Extracting resource zip: ", resfile);
	spawnSync("unzip", ["-j", filename, "\*/resources/"+resfile], {encoding:"utf8"});
	spawnSync("unzip", [resfile], {encoding:"utf8"});
	console.log("Unzip completed");

	console.log("Moving target dir to:", targetdir);
	fs.unlinkSync("mobilefirst-cli-"+fullver+"-install.zip");
	rimraf.sync(targetdir);
	fs.renameSync("./mobilefirst-cli", targetdir);

	var svrdir = targetdir+"/node_modules/generator-worklight-server/app/templates/wlp/bin/";
	console.log("Fixing server permissions:", svrdir);
	fs.chmodSync(svrdir, "755" );

	console.log("Finished.");

}

//-----------------------------------------------------------------------------
module.exports = getLatestVersion
