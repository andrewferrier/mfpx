//-----------------------------------------------------------------------
//-- mfpx-run
//-----------------------------------------------------------------------
var	mfpConfig        = require("mfpx-config"),
	cfg              = mfpConfig.config;

//-----------------------------------------------------------------------
// Run the real version specific MFP
module.exports = function( args, sync ) {
	var cp  = require('child_process'),
		currentMfp = null,
		mfpCmd = "",
		action;

	if ( sync ) {
		action = cp.spawnSync;
		//console.log("Running 'mfp' with:", args);
	} else {
		action = cp.spawn;
	}
	
	//console.log("cfg.versions", cfg.mfp_versions);
	//console.log("cfg.version", cfg.mfp_version);
	currentMfp = mfpConfig.get("mfp_instance_version");
	mfpCmd = currentMfp.cmd;

	//console.log("MFP cmd:", mfpCmd, args.join(" "));
	
	try {
		if ( currentMfp.java_home ) {
			process.env['JAVA_HOME'] = currentMfp.java_home;
			process.env['PATH']      = currentMfp.java_home+"/bin:" + process.env['PATH'];
		}
				
		//-- Launch custom MFP
		action( mfpCmd, args, { stdio:'inherit' } );
	} catch(e) {
		console.error("Failed to run 'mfp'", args, sync, e);
	}
};

//-----------------------------------------------------------------------
// Is cmd in path?
var _inPath = function ( cmd ) {
	var path       = require('path'),
		fs         = require('fs');

	console.log("Running test for: ", cmd);

	//-- Try walking path
	console.time("path");
	var valid = false;
	process.env.PATH.split(path.delimiter).some( function(p) {
		var full = path.join(p, cmd);
		//console.log("testing: ", full);
		if ( fs.existsSync(full) ) {
			//console.log("Found:", full);
			try {
				fs.accessSync( full, fs.X_OK );
				console.log("Found and executable: ", full);
				valid = true;
				return valid;
			} catch(e) {
				//-- not executable
				//console.error("Err: ", e, full);
			}
		}
	});
	console.log("CMD in path = ", valid);
	console.timeEnd("path");
}

//-----------------------------------------------------------------------
